
Desires:
* use this project to learn and implement new coding practices

Todo:
* write cucumber features describing game results
* decide on a class layout
* decide on a visual representation of the game board and scenario results

Current thoughts:
* the program should pick a beginning outpost, most likely the one that is the 'farthest' away, and then
establish soldier placement. Subsequent outposts will be chosen, again based upon distance, and one at a
time, the program should place soldiers
* perhaps every completed scenario could be stored in a database that can be referenced later
* maybe certain _patterns_ could be stored in the database that can be referenced later
* the first emphasis should be on scenario completion, rather than on optimization
* the game should be run with rake
* first feature tests should probably only test single outposts, in a variety of 'distances'
* Battlefield will be an array of arrays, corresponding to rows and columns
* Battlefield shoudl be initialized with pairs of coordinates for outposts
* I want the Battlefield upper (and lower) size to grow dynamically as more pieces are placed
* for now I want output to look like this:
[ ][ ][f][ ][ ]
[ ][ ][ ][f][ ]
[ ][f][ ][ ][ ]
===============
[o][o][o][o][o]
[o][o][o][o][ ]
[ ][ ][o][ ][ ]

where the 'o's are cells and the 'v's are virues
* thinking about reworking the idea to be viruses: you place white blood cells and viruses in 'cells'
and they have to 'jump' each other to get closer to the viruses? maybe...
* if we think of the battlefield as an x-y plane, rather than a limited array, we can expand in all directions
without changing array size
* can we store information about the battlefield as a hash? {Cell=>'virus',Cell=>'wbc',Cell=>...}
where each Cell is an x-y pair
* the goal of this is to be able to 'quickly' scan a large set and get back information without weird
location tricks, and to be expandable
* currently have the battlefield expandable by checking outermost boundaries and adjusting accordingly
* also have dealt with the phenomenon of having no 0 coordinates.
* need to implement actual game logic:
* in order for a virus to be captured we need to have one of the following 3 setups:
 v, v-o-o, o-o-v, assuming we never want to jump backwards
 |
 o
 |
 o

* the virus need to have one stationary cell placed directly adjacent to it, and then have one mobile cell
placed directly adjacent to the stationary cell, in line with the virus.
v-s-m
* when placing a stationary cell, we need to only check the 3 spaces directly adjacent to the virus and
make sure they are valid placements, i.e. unoccupied and also friendly territory
?-v-?
  |
  ?
 
